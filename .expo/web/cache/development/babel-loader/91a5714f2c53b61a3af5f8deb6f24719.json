{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nellyaporado/Desktop/pearl-pay-essential-react-native/App.js\";\nimport React from 'react';\nimport * as Font from 'expo-font';\nimport Icon from \"@expo/vector-icons/MaterialIcons\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport BottomTabs from \"./src/navigation/BottomTabs\";\nimport Login from \"./src/screens/Login\";\nimport Wallets from \"./src/screens/Wallets\";\nimport History from \"./src/screens/History\";\nimport PlannedPayments from \"./src/screens/PlannedPayments\";\nimport AddPaymentPlan from \"./src/screens/AddPaymentPlan\";\nimport LoadingIndicator from \"./src/components/LoadingIndicator\";\nimport { AuthContext } from \"./src/context/AuthContext\";\nimport * as AbstractStorage from \"./src/abstractStorage\";\nvar Stack = createStackNavigator();\nexport default function App() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      auth = _React$useState2[0],\n      setAuth = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hydrated = _React$useState4[0],\n      setHydrated = _React$useState4[1];\n\n  React.useEffect(function () {\n    function rehydrate() {\n      var authDataPromise, fontPromise, _await$Promise$all, _await$Promise$all2, authData, _ref, token, username;\n\n      return _regeneratorRuntime.async(function rehydrate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              authDataPromise = AbstractStorage.getItemAsync('authData');\n              fontPromise = Font.loadAsync({\n                'open-sans-regular': require(\"./assets/fonts/OpenSans-Regular.ttf\")\n              });\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all([authDataPromise, fontPromise]));\n\n            case 4:\n              _await$Promise$all = _context.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 1);\n              authData = _await$Promise$all2[0];\n              _ref = authData ? JSON.parse(authData) : {}, token = _ref.token, username = _ref.username;\n              setAuth(token && username ? {\n                token: token,\n                username: username\n              } : null);\n              setHydrated(true);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n\n    rehydrate();\n  }, []);\n\n  if (!hydrated) {\n    return null;\n  }\n\n  function onLogin(_ref2) {\n    var token, username;\n    return _regeneratorRuntime.async(function onLogin$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            token = _ref2.token, username = _ref2.username;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AbstractStorage.setItemAsync('authData', JSON.stringify({\n              token: token,\n              username: username\n            })));\n\n          case 3:\n            setAuth({\n              token: token,\n              username: username\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  function onLogout() {\n    return _regeneratorRuntime.async(function onLogout$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AbstractStorage.deleteItemAsync('authData'));\n\n          case 2:\n            setAuth(null);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  }\n\n  return React.createElement(AuthContext.Provider, {\n    value: _objectSpread({\n      onLogin: onLogin,\n      onLogout: onLogout\n    }, auth),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    }\n  }, React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    }\n  }, React.createElement(Stack.Navigator, {\n    headerMode: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    }\n  }, !auth ? React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: Login,\n    options: {\n      animationTypeForReplace: 'pop'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    }\n  }) : React.createElement(Stack.Screen, {\n    name: \"BottomTabs\",\n    component: BottomTabs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/nellyaporado/Desktop/pearl-pay-essential-react-native/App.js"],"names":["React","Font","Icon","NavigationContainer","createStackNavigator","BottomTabs","Login","Wallets","History","PlannedPayments","AddPaymentPlan","LoadingIndicator","AuthContext","AbstractStorage","Stack","App","useState","auth","setAuth","hydrated","setHydrated","useEffect","rehydrate","authDataPromise","getItemAsync","fontPromise","loadAsync","require","Promise","all","authData","JSON","parse","token","username","onLogin","setItemAsync","stringify","onLogout","deleteItemAsync","animationTypeForReplace"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Font from 'expo-font';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport BottomTabs from './src/navigation/BottomTabs';\nimport Login from './src/screens/Login';\nimport Wallets from './src/screens/Wallets';\nimport History from './src/screens/History';\nimport PlannedPayments from './src/screens/PlannedPayments';\nimport AddPaymentPlan from './src/screens/AddPaymentPlan';\nimport LoadingIndicator from './src/components/LoadingIndicator';\nimport { AuthContext } from './src/context/AuthContext';\nimport * as AbstractStorage from './src/abstractStorage';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  const [auth, setAuth] = React.useState(null);\n  const [hydrated, setHydrated] = React.useState(false);\n\n  React.useEffect(() => {\n    async function rehydrate() {\n      const authDataPromise = AbstractStorage.getItemAsync('authData');\n\n      const fontPromise = Font.loadAsync({\n        'open-sans-regular': require('./assets/fonts/OpenSans-Regular.ttf'),\n      });\n\n      const [authData] = await Promise.all([authDataPromise, fontPromise]);\n\n      const { token, username } = authData ? JSON.parse(authData) : {};\n\n      setAuth(token && username ? { token, username } : null);\n      setHydrated(true);\n    }\n    rehydrate();\n  }, []);\n\n  if (!hydrated) {\n    return null;\n  }\n\n  async function onLogin({ token, username }) {\n    await AbstractStorage.setItemAsync(\n      'authData',\n      JSON.stringify({ token, username }),\n    );\n    setAuth({ token, username });\n  }\n\n  async function onLogout() {\n    await AbstractStorage.deleteItemAsync('authData');\n    setAuth(null);\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        onLogin,\n        onLogout,\n        ...auth,\n      }}\n    >\n      <NavigationContainer>\n        <Stack.Navigator headerMode=\"none\">\n          {!auth ? (\n            <Stack.Screen\n              name=\"Login\"\n              component={Login}\n              options={{\n                animationTypeForReplace: 'pop',\n              }}\n            />\n          ) : (\n            <Stack.Screen name=\"BottomTabs\" component={BottomTabs} />\n          )}\n        </Stack.Navigator>\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}