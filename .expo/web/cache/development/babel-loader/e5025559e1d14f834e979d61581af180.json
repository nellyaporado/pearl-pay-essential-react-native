{"ast":null,"code":"var _jsxFileName = \"/Users/nellyaporado/Desktop/pearl-pay-essential-react-native/src/components/Carousel/CarouselScrollIndicator.js\";\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar UNSELECTED_COLOR = '#adadad';\nvar SELECTED_COLOR = '#3a3a3a';\nvar CIRCLE_SIZE = 10;\nexport default function CarouselScrollIndicator(_ref) {\n  var scrollValue = _ref.scrollValue,\n      itemWidth = _ref.itemWidth,\n      count = _ref.count;\n  return React.createElement(View, {\n    style: styles.indicator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    }\n  }, new Array(count).fill(0).map(function (_, i) {\n    {}\n    var scrollBarValue = 0;\n    return React.createElement(View, {\n      key: \"circle-indicator-\" + i,\n      style: [styles.circle, styles.circleContainer],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      }\n    }, React.createElement(Animated.View, {\n      style: [styles.circle, styles.selection, {\n        transform: [{\n          translateX: scrollBarValue\n        }]\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      }\n    }));\n  }));\n}\nvar styles = StyleSheet.create({\n  indicator: {\n    flexDirection: 'row'\n  },\n  circleContainer: {\n    overflow: 'hidden',\n    backgroundColor: UNSELECTED_COLOR,\n    margin: 10\n  },\n  circle: {\n    borderRadius: 2 * CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    width: CIRCLE_SIZE\n  },\n  selection: {\n    backgroundColor: SELECTED_COLOR,\n    position: 'absolute'\n  }\n});","map":{"version":3,"sources":["/Users/nellyaporado/Desktop/pearl-pay-essential-react-native/src/components/Carousel/CarouselScrollIndicator.js"],"names":["React","UNSELECTED_COLOR","SELECTED_COLOR","CIRCLE_SIZE","CarouselScrollIndicator","scrollValue","itemWidth","count","styles","indicator","Array","fill","map","_","i","scrollBarValue","circle","circleContainer","selection","transform","translateX","StyleSheet","create","flexDirection","overflow","backgroundColor","margin","borderRadius","height","width","position"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAGA,IAAMC,gBAAgB,GAAG,SAAzB;AACA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,WAAW,GAAG,EAApB;AAEA,eAAe,SAASC,uBAAT,OAIZ;AAAA,MAHDC,WAGC,QAHDA,WAGC;AAAA,MAFDC,SAEC,QAFDA,SAEC;AAAA,MADDC,KACC,QADDA,KACC;AACD,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,IAAIC,KAAJ,CAAUH,KAAV,EAAiBI,IAAjB,CAAsB,CAAtB,EAAyBC,GAAzB,CAA6B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACtC,KAIC;AACD,QAAMC,cAAc,GAAG,CAAvB;AACA,WACE,oBAAC,IAAD;AACE,MAAA,GAAG,wBAAsBD,CAD3B;AAEE,MAAA,KAAK,EAAE,CAACN,MAAM,CAACQ,MAAR,EAAgBR,MAAM,CAACS,eAAvB,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,KAAK,EAAE,CACLT,MAAM,CAACQ,MADF,EAELR,MAAM,CAACU,SAFF,EAGL;AACEC,QAAAA,SAAS,EAAE,CACT;AACEC,UAAAA,UAAU,EAAEL;AADd,SADS;AADb,OAHK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAoBD,GA3BA,CADH,CADF;AAgCD;AAED,IAAMP,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,SAAS,EAAE;AACTc,IAAAA,aAAa,EAAE;AADN,GADoB;AAI/BN,EAAAA,eAAe,EAAE;AACfO,IAAAA,QAAQ,EAAE,QADK;AAEfC,IAAAA,eAAe,EAAExB,gBAFF;AAGfyB,IAAAA,MAAM,EAAE;AAHO,GAJc;AAS/BV,EAAAA,MAAM,EAAE;AACNW,IAAAA,YAAY,EAAE,IAAIxB,WADZ;AAENyB,IAAAA,MAAM,EAAEzB,WAFF;AAGN0B,IAAAA,KAAK,EAAE1B;AAHD,GATuB;AAc/Be,EAAAA,SAAS,EAAE;AACTO,IAAAA,eAAe,EAAEvB,cADR;AAET4B,IAAAA,QAAQ,EAAE;AAFD;AAdoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\n\nconst UNSELECTED_COLOR = '#adadad';\nconst SELECTED_COLOR = '#3a3a3a';\nconst CIRCLE_SIZE = 10;\n\nexport default function CarouselScrollIndicator({\n  scrollValue,\n  itemWidth,\n  count,\n}) {\n  return (\n    <View style={styles.indicator}>\n      {new Array(count).fill(0).map((_, i) => {\n        {\n          /**\n           * TODO: implement interpolation of ScrollValue to translateX\n           */\n        }\n        const scrollBarValue = 0;\n        return (\n          <View\n            key={`circle-indicator-${i}`}\n            style={[styles.circle, styles.circleContainer]}\n          >\n            <Animated.View\n              style={[\n                styles.circle,\n                styles.selection,\n                {\n                  transform: [\n                    {\n                      translateX: scrollBarValue,\n                    },\n                  ],\n                },\n              ]}\n            />\n          </View>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    flexDirection: 'row',\n  },\n  circleContainer: {\n    overflow: 'hidden',\n    backgroundColor: UNSELECTED_COLOR,\n    margin: 10,\n  },\n  circle: {\n    borderRadius: 2 * CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    width: CIRCLE_SIZE,\n  },\n  selection: {\n    backgroundColor: SELECTED_COLOR,\n    position: 'absolute',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}