{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Config from \"./config\";\nvar COMMON_HEADERS = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n};\nexport function login(_ref) {\n  var username, password, response;\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          username = _ref.username, password = _ref.password;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(Config.BASE_API_URL + \"/user\", {\n            method: 'POST',\n            headers: COMMON_HEADERS,\n            body: JSON.stringify({\n              username: username,\n              password: password,\n              code: 'pearl-pay'\n            })\n          }));\n\n        case 3:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function getWallets(_ref2) {\n  var token, response;\n  return _regeneratorRuntime.async(function getWallets$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          token = _ref2.token;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(Config.BASE_API_URL + \"/wallets\", {\n            method: 'GET',\n            headers: _objectSpread({}, COMMON_HEADERS, {\n              Authorization: token\n            })\n          }));\n\n        case 3:\n          response = _context2.sent;\n          return _context2.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\nexport function getTransaction(_ref3) {\n  var transactionId, token, response;\n  return _regeneratorRuntime.async(function getTransaction$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          transactionId = _ref3.transactionId, token = _ref3.token;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(Config.BASE_API_URL + \"/transaction/\" + transactionId, {\n            method: 'GET',\n            headers: _objectSpread({}, COMMON_HEADERS, {\n              Authorization: token\n            })\n          }));\n\n        case 3:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n}\nexport function getPayments(_ref4) {\n  var token, response;\n  return _regeneratorRuntime.async(function getPayments$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          token = _ref4.token;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch(Config.BASE_API_URL + \"/planned_payments\", {\n            method: 'GET',\n            headers: _objectSpread({}, COMMON_HEADERS, {\n              authorization: token\n            })\n          }));\n\n        case 3:\n          response = _context4.sent;\n          return _context4.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  });\n}\nexport function deletePayment(_ref5) {\n  var token, paymentId, response;\n  return _regeneratorRuntime.async(function deletePayment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          token = _ref5.token, paymentId = _ref5.paymentId;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(fetch(Config.BASE_API_URL + \"/planned_payments/\" + paymentId, {\n            method: 'DELETE',\n            headers: _objectSpread({}, COMMON_HEADERS, {\n              authorization: token\n            })\n          }));\n\n        case 3:\n          response = _context5.sent;\n          return _context5.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  });\n}\nexport function createPayment(_ref6) {\n  var token, value, label, type, response;\n  return _regeneratorRuntime.async(function createPayment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          token = _ref6.token, value = _ref6.value, label = _ref6.label, type = _ref6.type;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(fetch(Config.BASE_API_URL + \"/planned_payments\", {\n            method: 'PUT',\n            headers: _objectSpread({}, COMMON_HEADERS, {\n              authorization: token\n            }),\n            body: JSON.stringify({\n              value: Number(value),\n              label: label,\n              type: type\n            })\n          }));\n\n        case 3:\n          response = _context6.sent;\n          return _context6.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  });\n}\nexport function getHistory(_ref7) {\n  var token, response;\n  return _regeneratorRuntime.async(function getHistory$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          token = _ref7.token;\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(fetch(Config.BASE_API_URL + \"/history\", {\n            method: 'GET',\n            headers: _objectSpread({}, COMMON_HEADERS, {\n              Authorization: token\n            })\n          }));\n\n        case 3:\n          response = _context7.sent;\n          return _context7.abrupt(\"return\", response.json());\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/nellyaporado/Desktop/pearl-pay-essential-react-native/src/services.js"],"names":["Config","COMMON_HEADERS","Accept","login","username","password","fetch","BASE_API_URL","method","headers","body","JSON","stringify","code","response","json","getWallets","token","Authorization","getTransaction","transactionId","getPayments","authorization","deletePayment","paymentId","createPayment","value","label","type","Number","getHistory"],"mappings":"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","sourcesContent":["import Config from './config';\n\nconst COMMON_HEADERS = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n};\n\nexport async function login({ username, password }) {\n  const response = await fetch(`${Config.BASE_API_URL}/user`, {\n    method: 'POST',\n    headers: COMMON_HEADERS,\n    body: JSON.stringify({\n      username,\n      password,\n      code: 'pearl-pay',\n    }),\n  });\n\n  return response.json();\n}\n\nexport async function getWallets({ token }) {\n  const response = await fetch(`${Config.BASE_API_URL}/wallets`, {\n    method: 'GET',\n    headers: {\n      ...COMMON_HEADERS,\n      Authorization: token,\n    },\n  });\n\n  return response.json();\n}\n\nexport async function getTransaction({ transactionId, token }) {\n  const response = await fetch(\n    `${Config.BASE_API_URL}/transaction/${transactionId}`,\n    {\n      method: 'GET',\n      headers: {\n        ...COMMON_HEADERS,\n        Authorization: token,\n      },\n    },\n  );\n\n  return response.json();\n}\n\nexport async function getPayments({ token }) {\n  const response = await fetch(`${Config.BASE_API_URL}/planned_payments`, {\n    method: 'GET',\n    headers: {\n      ...COMMON_HEADERS,\n      authorization: token,\n    },\n  });\n\n  return response.json();\n}\n\nexport async function deletePayment({ token, paymentId }) {\n  const response = await fetch(\n    `${Config.BASE_API_URL}/planned_payments/${paymentId}`,\n    {\n      method: 'DELETE',\n      headers: {\n        ...COMMON_HEADERS,\n        authorization: token,\n      },\n    },\n  );\n\n  return response.json();\n}\n\nexport async function createPayment({ token, value, label, type }) {\n  const response = await fetch(`${Config.BASE_API_URL}/planned_payments`, {\n    method: 'PUT',\n    headers: {\n      ...COMMON_HEADERS,\n      authorization: token,\n    },\n    body: JSON.stringify({\n      value: Number(value),\n      label,\n      type,\n    }),\n  });\n\n  return response.json();\n}\n\nexport async function getHistory({ token }) {\n  const response = await fetch(`${Config.BASE_API_URL}/history`, {\n    method: 'GET',\n    headers: {\n      ...COMMON_HEADERS,\n      Authorization: token,\n    },\n  });\n\n  return response.json();\n}\n"]},"metadata":{},"sourceType":"module"}